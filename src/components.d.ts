/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Icons } from "./components/icon/icon";
import { Breakpoints, ColDescriptor, ComboboxAction, ComponentSize, EuiOptionInterface, OverlayEventDetail, SelectChangeEventDetail, SelectDropdownLocalization, SelectOptionInterface, TextFieldTypes } from "./interface";
import { Icons as Icons1 } from "./components/icon/icon";
import { EuiInputChangeEventDetails, InputModes } from "./components/input/interfaces";
import { RadioGroupValue } from "./components/radio-group/radio-group";
import { Gutter } from "./components/row/row";
import { SelectCompareFn } from "./components/select/select-interface";
import { EuiTextareaChangeEventDetails } from "./components/textarea/interfaces";
export namespace Components {
    interface EuiAppBar {
        /**
          * styles of the app-bar
         */
        "styles": {
    position?: 'fixed' | 'absolute' | 'relative';
    height?: number;
    background?: string;
    endDistances?: number;
    boxShadows?: {
      top?: string;
      bottom?: string;
    };
  };
        /**
          * location of the app-bar
          * @type {('top' | 'bottom')}
         */
        "type": 'top' | 'bottom';
    }
    interface EuiButton {
        /**
          * active state for the button
         */
        "active"?: boolean;
        /**
          * if set button will render as an icon button disregarding leadingIcon trailingIcon and text
          * @type Icons
         */
        "buttonIcon": Icons;
        /**
          * disables the button
         */
        "disabled"?: boolean;
        /**
          * sets the leading icon for the component
         */
        "leadingIcon": Icons;
        /**
          * sets the size of the button
          * @type ComponentSize
         */
        "size"?: ComponentSize;
        /**
          * sets a text label for the button
         */
        "text"?: string;
        /**
          * sets the trailing icon for the component
         */
        "trailingIcon": Icons;
        /**
          * sets the styling of the button
          * @type  'raised' | 'outlined' | 'text' | 'brand'
         */
        "type"?: 'primary' | 'outlined' | 'text' | 'brand';
    }
    interface EuiButtonGroup {
    }
    interface EuiButtonMenu {
        /**
          * sets the alignment of the dropdown
          * @type {('left' | 'right')}
         */
        "dropdownAlignment"?: 'left' | 'right';
        /**
          * sets the parent element for the eui-button-menu's dropdown
          * @type {HTMLElement}
         */
        "dropdownParent"?: HTMLElement;
        /**
          * sets the width of the dropdown
          * @type {(string | number)}
         */
        "dropdownWidth"?: number | string;
        /**
          * sets and reflects the state of the dropdown inside the button menu
          * @type {boolean}
         */
        "isDropdownOpen"?: boolean;
        /**
          * sets the size of the eui-button-menu
          * @type {string}
         */
        "size"?: ComponentSize;
        /**
          * sets the label of the eui-button-menu
          * @type {string}
         */
        "text"?: string;
        /**
          * sets the styling of the eui-button-menu
          * @type {string}
         */
        "type"?: 'primary' | 'brand' | 'outlined' | 'text';
    }
    interface EuiCard {
    }
    interface EuiCheckbox {
        /**
          * sets and reflects the state of the checkbox partial counts as unchecked
         */
        "checked"?: boolean;
        /**
          * disables the checkbox and the pointer events
          * @type {string}
         */
        "disabled"?: boolean;
        /**
          * sets error design
         */
        "error"?: boolean;
        /**
          * sets the label for the checkbox
         */
        "label"?: string;
        /**
          * sets the name attribute of the inner input
         */
        "name"?: string;
        /**
          * sets the visual for the partial checkbox only unchecked inputs will shown as partial
         */
        "partial"?: boolean;
        /**
          * sets the size of the checkbox
         */
        "size"?: ComponentSize;
    }
    interface EuiChip {
        /**
          * sets the label of the chip
         */
        "label": string;
        /**
          * if true the will have rounded edges
         */
        "rounded"?: boolean;
        /**
          * sets the size of the component
          * @type {ComponentSize}
         */
        "size"?: ComponentSize;
    }
    interface EuiCol {
        /**
          * sets all parameters of the component for below lg breakpoint when an object is passed or sets the span of the component when number is passed
          * @type  (number | ColDescriptor)
         */
        "lg": number | ColDescriptor;
        /**
          * sets left of the col proportionately to the spans of the parent for below lg breakpoint
          * @type number
         */
        "lgOffset": number;
        /**
          * sets the ordering of the columns for below lg breakpoint
          * @type number
         */
        "lgOrder": number;
        /**
          * sets the width of the col according to the parent row's `spans` for below lg breakpoint
          * @type number
         */
        "lgSpan": number;
        /**
          * sets all parameters of the component for below md breakpoint when an object is passed or sets the span of the component when number is passed
          * @type  (number | ColDescriptor)
         */
        "md": number | ColDescriptor;
        /**
          * sets left of the col proportionately to the spans of the parent for below md breakpoint
          * @type number
         */
        "mdOffset": number;
        /**
          * sets the ordering of the columns for below md breakpoint
          * @type number
         */
        "mdOrder": number;
        /**
          * sets the width of the col according to the parent row's `spans` for below md breakpoint
          * @type number
         */
        "mdSpan": number;
        /**
          * sets left of the col proportionately to the spans of the parent
          * @type number
         */
        "offset": number;
        /**
          * sets the ordering of the columns
          * @type number
         */
        "order": number;
        /**
          * sets all parameters of the component for below sm breakpoint when an object is passed or sets the span of the component when number is passed
          * @type  (number | ColDescriptor)
         */
        "sm": number | ColDescriptor;
        /**
          * sets left of the col proportionately to the spans of the parent for below sm breakpoint
          * @type number
         */
        "smOffset": number;
        /**
          * sets the ordering of the columns for below sm breakpoint
          * @type number
         */
        "smOrder": number;
        /**
          * sets the width of the col according to the parent row's `spans` for below sm breakpoint
          * @type number
         */
        "smSpan": number;
        /**
          * sets the width of the col according to the parent row's `spans`
          * @type number
         */
        "span": number;
        /**
          * sets all parameters of the component for below xl breakpoint when an object is passed or sets the span of the component when number is passed
          * @type  (number | ColDescriptor)
         */
        "xl": number | ColDescriptor;
        /**
          * sets left of the col proportionately to the spans of the parent for below xl breakpoint
          * @type number
         */
        "xlOffset": number;
        /**
          * sets the ordering of the columns for below xl breakpoint
          * @type number
         */
        "xlOrder": number;
        /**
          * sets the width of the col according to the parent row's `spans` for below xl breakpoint
          * @type number
         */
        "xlSpan": number;
        /**
          * sets all parameters of the component for below xs breakpoint when an object is passed or sets the span of the component when number is passed
          * @type  (number | ColDescriptor)
         */
        "xs": number | ColDescriptor;
        /**
          * sets left of the col proportionately to the spans of the parent for below xs breakpoint
          * @type number
         */
        "xsOffset": number;
        /**
          * sets the ordering of the columns for below xs breakpoint
          * @type number
         */
        "xsOrder": number;
        /**
          * sets the width of the col according to the parent row's `spans` for below xs breakpoint
          * @type number
         */
        "xsSpan": number;
        /**
          * sets all parameters of the component for below xxl breakpoint when an object is passed or sets the span of the component when number is passed
          * @type  (number | ColDescriptor)
         */
        "xxl": number | ColDescriptor;
        /**
          * sets left of the col proportionately to the spans of the parent for below xxl breakpoint
          * @type number
         */
        "xxlOffset": number;
        /**
          * sets the ordering of the columns for below xxl breakpoint
          * @type number
         */
        "xxlOrder": number;
        /**
          * sets the width of the col according to the parent row's `spans` for below xxl breakpoint
          * @type number
         */
        "xxlSpan": number;
        /**
          * sets all parameters of the component for xxl breakpoint and over when an object is passed or sets the span of the component when number is passed
          * @type  (number | ColDescriptor)
         */
        "xxxl": number | ColDescriptor;
        /**
          * sets left of the col proportionately to the spans of the parent for xxl breakpoint and over
          * @type number
         */
        "xxxlOffset": number;
        /**
          * sets the ordering of the columns for xxl breakpoint and over
          * @type number
         */
        "xxxlOrder": number;
        /**
          * sets the width of the col according to the parent row's `spans` for xxl breakpoint and over
          * @type number
         */
        "xxxlSpan": number;
    }
    interface EuiDrawer {
        /**
          * sets and reflects the state of the left drawer
          * @type {boolean}
         */
        "leftDrawerIsOpen"?: boolean;
        /**
          * sets the name of the drawer, it will be used in the events
          * @type {string}
         */
        "name"?: string;
        /**
          * sets and reflects the state of the right drawer
          * @type {boolean}
         */
        "rightDrawerIsOpen"?: boolean;
        /**
          * sets the size of the component
          * @type {ComponentSize}
         */
        "size"?: ComponentSize;
        /**
          * Lets you set the state of the doors
          * @param side
          * @param isOpen
          * @return
         */
        "toggleDrawer": (side: 'left' | 'right', isOpen: boolean) => Promise<void>;
        /**
          * sets the type of the drawer
          * @type {string}
         */
        "type"?: 'push' | 'squish' | 'overlay';
    }
    interface EuiDropdown {
        /**
          * sets and reflects the state of the dropdown
          * @type {boolean}
         */
        "isOpen": boolean;
        /**
          * sets and reflects the identifier of the opener
          * @type {null}
         */
        "openerId": string;
        /**
          * sets the position of the dropdown
          * @type {{}}
         */
        "position"?: { top?: number; right?: number; bottom?: number; left?: number };
        /**
          * sets the size of the component can be 'small', 'medium' or 'large' defaults to 'small'
         */
        "size"?: ComponentSize;
        /**
          * sets and reflects the width of the dropdown
          * @type {boolean}
         */
        "width": string;
    }
    interface EuiDropdownWrapper {
        /**
          * sets the alignment of the dropdown based on this element
          * @type {('left' | 'right')}
         */
        "dropdownAlignment"?: 'left' | 'right';
        /**
          * sets the parent element for the dropdown
          * @type {HTMLElement}
         */
        "dropdownParent"?: HTMLElement;
        /**
          * sets the width of the dropdown
          * @type {(string | number)}
         */
        "dropdownWidth"?: number | string;
        /**
          * sets and reflects the state of it's dropdown element
          * @type {boolean}
         */
        "isDropdownOpen"?: boolean;
    }
    interface EuiField {
        /**
          * passes on disabled state to the component
         */
        "disabled": boolean;
        /**
          * error message that is to be displayed
         */
        "error"?: string;
        /**
          * message to be displayed in case of error
         */
        "errorDisplayType"?: 'always' | 'onError';
        /**
          * label that is to be displayed infront of over the component
          * @type string
         */
        "label": string;
        /**
          * sets the label style of the component
          * @type {'strong' | 'default'}
         */
        "labelStyle": 'strong' | 'default';
        /**
          * Sets the error for the field
          * @param error
          * @return
         */
        "setError": (error: string) => Promise<void>;
        /**
          * sets size on child component
         */
        "size": ComponentSize;
    }
    interface EuiIcon {
        /**
          * the name of the icon in case it used with the built in ones
         */
        "icon"?: Icons;
        /**
          * sets the size of the component
          * @type {ComponentSize}
         */
        "size": ComponentSize;
        /**
          * sets the source of the image to one of your assets
         */
        "src"?: string;
        /**
          * type of the icon it can be svg or img, it takes a guess if not provided
         */
        "type"?: 'img' | 'svg';
    }
    interface EuiInput {
        /**
          * If the value of the type attribute is `"file"`, then this attribute will indicate the types of files that the server accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.
         */
        "accept"?: string;
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
          * @type {('off' | 'none' | 'on' | 'sentences' | 'words' | 'characters')}
         */
        "autocapitalize": string;
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autocomplete": 'on' | 'off';
        /**
          * Whether auto correction should be enabled when the user is entering/editing the text value.
         */
        "autocorrect": 'on' | 'off';
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus": boolean;
        /**
          * If set true clears error state on the input when focused
         */
        "clearErrorOnFocus": boolean;
        /**
          * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
         */
        "clearInput": boolean;
        /**
          * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `"password"`, `false` for all other types.
         */
        "clearOnEdit"?: boolean;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled": boolean;
        /**
          * if set true it enables error state for the input
         */
        "error"?: boolean;
        /**
          * Calls the focus on the underlying input
          * @return
         */
        "focusInput": () => Promise<void>;
        /**
          * Returns the focus state
          * @return
         */
        "getFocusState": () => Promise<boolean>;
        /**
          * Returns the native `<input>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLInputElement>;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: InputModes;
        /**
          * True if input is part of an eui-field
         */
        "isField"?: boolean;
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `"email"` or `"file"`, otherwise it is ignored.
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
         */
        "pattern"?: string;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string | null;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * Sets focus on the specified `eui-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * sets the size of the input can be 'small', 'medium' or 'large' defaults to 'small'
         */
        "size"?: ComponentSize;
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck": boolean;
        /**
          * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `"any"` or a positive floating point number.
         */
        "step"?: string;
        /**
          * The type of control to display. The default type is text.
         */
        "type": TextFieldTypes;
        /**
          * The value of the input.
         */
        "value"?: string | null | number;
    }
    interface EuiItemCounter {
        /**
          * Number of active items
          * @type {number}
         */
        "activeItem": number;
        /**
          * Number of all item
          * @type {number}
         */
        "allItem": number;
        /**
          * sets the size of the component can be 'small', 'medium' or 'large' defaults to 'small'
         */
        "size"?: ComponentSize;
    }
    interface EuiLoadingSpinner {
        /**
          * sets the stroke color of the animation
          * @type {string}
         */
        "color": string;
    }
    interface EuiMenuController {
        /**
          * Name of the selected panel
         */
        "selectedPanel": string;
    }
    interface EuiMenuDivider {
    }
    interface EuiMenuHeader {
        /**
          * sets the level of indent
         */
        "indent": number;
        /**
          * the amount by which each level is indented to the previous level
         */
        "indentAmount": number;
        /**
          * sets the size of the component can be 'small', 'medium' or 'large' defaults to 'small'
         */
        "size"?: ComponentSize;
    }
    interface EuiMenuItem {
        /**
          * adds checked design to the component
         */
        "checked": boolean;
        /**
          * adds disabled design to the component prevents mouse click events and the opening of the dropdown
         */
        "disabled": boolean;
        /**
          * sets the element to which the dropdown should be appended if present
         */
        "dropdownParent": HTMLElement;
        /**
          * sets the width of the dropdown if present
         */
        "dropdownWidth": number;
        /**
          * sets the level of indent
         */
        "indent": number;
        /**
          * the amount by which each level is indented to the previous level
         */
        "indentAmount": number;
        /**
          * sets the open state of the dropdown of the component
          * @type {boolean}
         */
        "isDropdownOpen": boolean;
        /**
          * label that is to be displayed in the item
         */
        "itemLabel": string;
        /**
          * sets the position of selected line
         */
        "linePosition": 'left' | 'bottom' | 'top' | 'right';
        /**
          * sets the alignment of the dropdown
         */
        "nestAlignment": 'start' | 'center' | 'end';
        /**
          * sets the position of the dropdown
         */
        "nestPosition": 'bottom' | 'left' | 'right' | 'top';
        /**
          * adds selected design to the component
         */
        "selected": boolean;
        /**
          * sets the size of the component can be 'small', 'medium' or 'large' defaults to 'small'
         */
        "size"?: ComponentSize;
        /**
          * @return
         */
        "triggerSetup": () => Promise<void>;
        /**
          * sets the type of component if type is 'default' the component has no dropdown if type is 'click' the component has dropdown and it opens when the component is clicked if type is 'hover' the component has dropdown and it opens when the component is hovered if type is 'icon' the component has dropdown and it opens when the chevron in the component is clicked
          * @type {'default' | 'click' | 'hover' | 'icon'}
         */
        "type": 'default' | 'click' | 'hover' | 'icon';
        /**
          * unique id of the menu item
         */
        "uuid": string;
    }
    interface EuiMenuPanel {
        /**
          * Makes the panel headerless
          * @type {boolean}
         */
        "headerless"?: boolean;
        /**
          * sets the name of the menu panel
         */
        "panelName": string;
        /**
          * sets the title of the panel
          * @type {string}
         */
        "panelTitle"?: string;
        /**
          * sets the size of the component can be 'small', 'medium' or 'large' defaults to 'small'
         */
        "size"?: ComponentSize;
    }
    interface EuiMenuSection {
        /**
          * makes the menu section collapsible
         */
        "collapsible"?: boolean;
        /**
          * sets the indent for the menu item
         */
        "menuHeaderIndent"?: number;
        /**
          * sets the title of the section
         */
        "sectionTitle"?: string;
    }
    interface EuiPagination {
        /**
          * sets the current page
          * @type {number}
         */
        "currentPage": number;
        /**
          * sets the number of pages
          * @type {number}
         */
        "pages": number;
        /**
          * sets the size of the component can be 'small', 'medium' or 'large' defaults to 'small'
         */
        "size"?: ComponentSize;
    }
    interface EuiRadio {
        /**
          * sets and reflects the state of the radio element
         */
        "checked"?: boolean;
        /**
          * disable the radio element
         */
        "disabled"?: boolean;
        /**
          * sets the label of the inner radio input
         */
        "label"?: string;
        /**
          * sets the name of the inner radio input
         */
        "name"?: string;
        /**
          * sets the size of the component can be 'small', 'medium' or 'large' defaults to 'small'
         */
        "size"?: ComponentSize;
        /**
          * sets the value of the inner radio input
         */
        "value"?: number | string | string[];
    }
    interface EuiRadioGroup {
        /**
          * sets the name of the inner radios
         */
        "name": string;
        /**
          * sets and reflects the selected value of the inner radios
         */
        "value": number | string | string[];
        /**
          * sets values and label and availability of the radios
          * @type {RadioGroupValue[]}
         */
        "values": RadioGroupValue[];
    }
    interface EuiRow {
        /**
          * sets the breakpoint for window widths
         */
        "breakpoints": Breakpoints;
        /**
          * amount of space between cols horizontally
         */
        "gutter": number | Gutter;
        /**
          * sets the max amount of spans that are to be displayed in the component
          * @type number
         */
        "spans": number;
        /**
          * amount of space between cols vertically
         */
        "verticalGutter": number | Gutter;
    }
    interface EuiSection {
        /**
          * if the collapsible is set to true stores the state of the collapse
         */
        "collapsed": boolean;
        /**
          * if set to true a click on the header collapses the body
         */
        "collapsible": boolean;
        /**
          * changes the background color of the header
         */
        "headerStyle": 'light' | 'dark';
        /**
          * sets the label of the section required
         */
        "label": string;
        /**
          * changes the size related styles of the component
         */
        "size": ComponentSize;
    }
    interface EuiSelect {
        /**
          * The text to display on the cancel button.
         */
        "cancelText": string;
        /**
          * If set true clears error state on the input when focused
         */
        "clearErrorOnFocus": boolean;
        /**
          * A property name or function used to compare object values
         */
        "compareWith"?: string | SelectCompareFn | null;
        /**
          * If `true`, the user cannot interact with the select.
         */
        "disabled": boolean;
        /**
          * sets the parent of the dropdown
          * @type {HTMLElement}
         */
        "dropdownParent": HTMLElement;
        /**
          * position of the select dropdown component if set 'absolute' dropdown appears next to dropdown
         */
        "dropdownPosition": 'absolute' | 'fixed';
        /**
          * if set true it enables error state for the select
         */
        "error"?: boolean;
        /**
          * focus state of the component
         */
        "hasFocus": boolean;
        /**
          * True if input is part of an eui-field
         */
        "isField"?: boolean;
        /**
          * If `true`, the select can accept multiple values.
         */
        "multiple": boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * The text to display on the ok button.
         */
        "okText": string;
        /**
          * Open the select overlay. The overlay is either an alert, action sheet, or popover, depending on the `interface` property on the `eui-select`.
         */
        "open": () => Promise<HTMLEuiSelectDropdownElement>;
        /**
          * If `true`, the user cannot interact with the select.
         */
        "options": SelectOptionInterface[];
        /**
          * The text to display when the select is empty.
         */
        "placeholder"?: string | null;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * The text to display instead of the selected option's value.
         */
        "selectedText"?: string | null;
        /**
          * Sets the size styles of the select component
         */
        "size": ComponentSize;
        /**
          * Updates the dropdown position
          * @return
         */
        "updateDropdownPosition": () => Promise<void>;
        /**
          * the value of the select.
         */
        "value"?: EuiOptionInterface | EuiOptionInterface[];
        /**
          * If `true`, the user cannot interact with the select.
         */
        "valueDisplayPosition": 'under' | 'inside';
    }
    interface EuiSelectDropdown {
        /**
          * An array of actions for the select dropdown.
         */
        "actions"?: ComboboxAction[];
        /**
          * If `true`, the select dropdown will animate.
         */
        "animated": boolean;
        /**
          * sets the displayed content wrapper for the options
         */
        "contentElement"?: string;
        /**
          * custom parameters for custom content components
         */
        "customContentParams"?: {[key: string]: unknown};
        /**
          * custom parameters for custom option components
         */
        "customOptionParams"?: {[key: string]: unknown};
        /**
          * Dismiss the select dropdown overlay after it has been presented.
          * @param data Any data to emit in the dismiss events.
          * @param role The role of the element that is dismissing the select dropdown. This can be useful in a button handler for determining which button was clicked to dismiss the select dropdown. Some examples include: ``"cancel"`, `"destructive"`, "selected"`, and `"backdrop"`.
         */
        "dismiss": (data?: unknown, role?: string) => Promise<boolean>;
        /**
          * sets whether the filter is enabled
         */
        "inputEnabled"?: boolean;
        /**
          * loading state for the select dropdown.
         */
        "isLoading"?: boolean;
        /**
          * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
         */
        "keyboardClose": boolean;
        /**
          * contains the texts that can be overwritten
         */
        "localization"?: SelectDropdownLocalization;
        /**
          * min width of the component
         */
        "minWidth"?: number;
        /**
          * Returns a promise that resolves when the select dropdown did dismiss.
         */
        "onDidDismiss": () => Promise<OverlayEventDetail>;
        /**
          * Returns a promise that resolves when the select dropdown will dismiss.
         */
        "onWillDismiss": () => Promise<OverlayEventDetail>;
        /**
          * sets the displayed option element
         */
        "optionElement"?: string;
        /**
          * An array of options for the select dropdown.
         */
        "options"?: EuiOptionInterface[];
        "overlayIndex": number;
        /**
          * parent component
         */
        "parent"?: HTMLElement;
        /**
          * position of the dropdown
         */
        "position"?: 'absolute' | 'fixed';
        /**
          * Present the select dropdown overlay after it has been created.
         */
        "present": () => Promise<void>;
        /**
          * icon that is rendered in option
         */
        "selectedIcon"?: string;
        /**
          * sets whether selected icon is displayed in option
         */
        "selectedIconEnabled"?: boolean;
        /**
          * position of the selected icon in option
         */
        "selectedIconPosition"?: 'start' | 'end';
        /**
          * event sent by select filed on open
         */
        "size"?: ComponentSize;
        /**
          * updates the position of the dropdown
         */
        "updatePosition": () => Promise<void>;
        /**
          * value of the parent component
         */
        "value": EuiOptionInterface[] | EuiOptionInterface;
    }
    interface EuiSelectDropdownContent {
        /**
          * input to display loading state in the dropdown content
         */
        "isLoading": boolean;
        /**
          * component rendered for each option
          * @type string
         */
        "optionElement": string;
        /**
          * data that is to be displayed
         */
        "options": EuiOptionInterface[];
        /**
          * option's parameters
         */
        "params": {
    selectedIconPosition?: 'start' | 'end';
    selectedIconEnabled?: boolean;
    selectedIcon?: Icons;
    [key: string]: unknown
  };
        /**
          * size of the component
         */
        "size": ComponentSize;
    }
    interface EuiSelectDropdownOption {
        /**
          * option that is to be rendered
         */
        "option": EuiOptionInterface;
        /**
          * parameter of the component selected: sets selected design on the component selectedIconPosition: position of the selected icon selectedIconEnabled: sets whether selected icon is displayed selectedIcon: icon that is rendered isHighlighted: adds bg overlay to the component
         */
        "params": {
    selected?: boolean;
    selectedIconPosition?: 'start' | 'end';
    selectedIconEnabled?: boolean;
    selectedIcon?: Icons;
    isHighlighted?: boolean;
  };
        /**
          * size of the component
         */
        "size": ComponentSize;
    }
    interface EuiSelectOption {
        /**
          * If `true`, the user cannot interact with the select option.
         */
        "disabled": boolean;
        /**
          * in case of grouped options this will be the group of the option
         */
        "group": string;
        /**
          * If `true`, the element is selected.
         */
        "selected": boolean;
        /**
          * The text value of the option.
         */
        "value"?: string;
    }
    interface EuiSvg {
        /**
          * content
         */
        "content"?: string;
        /**
          * src of the svg that is to be fetched
         */
        "src": string;
    }
    interface EuiSwitch {
        /**
          * value of the component
          * @type boolean
          * @default false
         */
        "checked": boolean;
        /**
          * sets disabled state for the component
          * @type boolean
          * @default false
         */
        "disabled": boolean;
        /**
          * enables icon display in the switch component
          * @type boolean
          * @default false
         */
        "displayIcons": boolean;
        /**
          * helper text that is displayed under the component if unset it is not rendered
          * @type string | {checked: string, unchecked: string}
         */
        "helper": string | {checked: string, unchecked: string};
        /**
          * icons that are displayed in the component
          * @type { unchecked : Icons, checked: Icons }
          * @default { unchecked: 'x', checked: 'check' }
         */
        "icons": {
    unchecked: Icons,
    checked: Icons
  };
        /**
          * label to be displayed next to the component if unset label is not displayed
          * @type string
         */
        "label": string;
        /**
          * position of the label
          * @type {'left' | 'right'}
         */
        "labelPosition": 'left' | 'right';
        /**
          * size of the component
          * @type ComponentSize
         */
        "size": ComponentSize;
    }
    interface EuiTextarea {
        /**
          * If set true clears error state on the input when focused
         */
        "clearErrorOnFocus": boolean;
        /**
          * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
         */
        "clearInput": boolean;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled": boolean;
        /**
          * if set true it enables error state for the input
         */
        "error"?: boolean;
        /**
          * Focuses the inner input
          * @return
         */
        "focusInput": () => Promise<void>;
        /**
          * Returns the native `<input>` element used under the hood.
         */
        "getInputElement": () => Promise<HTMLTextAreaElement>;
        /**
          * True if input is part of an eui-field
         */
        "isField"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string | null;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly": boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required": boolean;
        /**
          * Sets focus on the specified `eui-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * sets the size of the input can be 'small', 'medium' or 'large' defaults to 'small'
         */
        "size"?: ComponentSize;
        /**
          * The value of the input.
         */
        "value"?: string;
    }
}
declare global {
    interface HTMLEuiAppBarElement extends Components.EuiAppBar, HTMLStencilElement {
    }
    var HTMLEuiAppBarElement: {
        prototype: HTMLEuiAppBarElement;
        new (): HTMLEuiAppBarElement;
    };
    interface HTMLEuiButtonElement extends Components.EuiButton, HTMLStencilElement {
    }
    var HTMLEuiButtonElement: {
        prototype: HTMLEuiButtonElement;
        new (): HTMLEuiButtonElement;
    };
    interface HTMLEuiButtonGroupElement extends Components.EuiButtonGroup, HTMLStencilElement {
    }
    var HTMLEuiButtonGroupElement: {
        prototype: HTMLEuiButtonGroupElement;
        new (): HTMLEuiButtonGroupElement;
    };
    interface HTMLEuiButtonMenuElement extends Components.EuiButtonMenu, HTMLStencilElement {
    }
    var HTMLEuiButtonMenuElement: {
        prototype: HTMLEuiButtonMenuElement;
        new (): HTMLEuiButtonMenuElement;
    };
    interface HTMLEuiCardElement extends Components.EuiCard, HTMLStencilElement {
    }
    var HTMLEuiCardElement: {
        prototype: HTMLEuiCardElement;
        new (): HTMLEuiCardElement;
    };
    interface HTMLEuiCheckboxElement extends Components.EuiCheckbox, HTMLStencilElement {
    }
    var HTMLEuiCheckboxElement: {
        prototype: HTMLEuiCheckboxElement;
        new (): HTMLEuiCheckboxElement;
    };
    interface HTMLEuiChipElement extends Components.EuiChip, HTMLStencilElement {
    }
    var HTMLEuiChipElement: {
        prototype: HTMLEuiChipElement;
        new (): HTMLEuiChipElement;
    };
    interface HTMLEuiColElement extends Components.EuiCol, HTMLStencilElement {
    }
    var HTMLEuiColElement: {
        prototype: HTMLEuiColElement;
        new (): HTMLEuiColElement;
    };
    interface HTMLEuiDrawerElement extends Components.EuiDrawer, HTMLStencilElement {
    }
    var HTMLEuiDrawerElement: {
        prototype: HTMLEuiDrawerElement;
        new (): HTMLEuiDrawerElement;
    };
    interface HTMLEuiDropdownElement extends Components.EuiDropdown, HTMLStencilElement {
    }
    var HTMLEuiDropdownElement: {
        prototype: HTMLEuiDropdownElement;
        new (): HTMLEuiDropdownElement;
    };
    interface HTMLEuiDropdownWrapperElement extends Components.EuiDropdownWrapper, HTMLStencilElement {
    }
    var HTMLEuiDropdownWrapperElement: {
        prototype: HTMLEuiDropdownWrapperElement;
        new (): HTMLEuiDropdownWrapperElement;
    };
    interface HTMLEuiFieldElement extends Components.EuiField, HTMLStencilElement {
    }
    var HTMLEuiFieldElement: {
        prototype: HTMLEuiFieldElement;
        new (): HTMLEuiFieldElement;
    };
    interface HTMLEuiIconElement extends Components.EuiIcon, HTMLStencilElement {
    }
    var HTMLEuiIconElement: {
        prototype: HTMLEuiIconElement;
        new (): HTMLEuiIconElement;
    };
    interface HTMLEuiInputElement extends Components.EuiInput, HTMLStencilElement {
    }
    var HTMLEuiInputElement: {
        prototype: HTMLEuiInputElement;
        new (): HTMLEuiInputElement;
    };
    interface HTMLEuiItemCounterElement extends Components.EuiItemCounter, HTMLStencilElement {
    }
    var HTMLEuiItemCounterElement: {
        prototype: HTMLEuiItemCounterElement;
        new (): HTMLEuiItemCounterElement;
    };
    interface HTMLEuiLoadingSpinnerElement extends Components.EuiLoadingSpinner, HTMLStencilElement {
    }
    var HTMLEuiLoadingSpinnerElement: {
        prototype: HTMLEuiLoadingSpinnerElement;
        new (): HTMLEuiLoadingSpinnerElement;
    };
    interface HTMLEuiMenuControllerElement extends Components.EuiMenuController, HTMLStencilElement {
    }
    var HTMLEuiMenuControllerElement: {
        prototype: HTMLEuiMenuControllerElement;
        new (): HTMLEuiMenuControllerElement;
    };
    interface HTMLEuiMenuDividerElement extends Components.EuiMenuDivider, HTMLStencilElement {
    }
    var HTMLEuiMenuDividerElement: {
        prototype: HTMLEuiMenuDividerElement;
        new (): HTMLEuiMenuDividerElement;
    };
    interface HTMLEuiMenuHeaderElement extends Components.EuiMenuHeader, HTMLStencilElement {
    }
    var HTMLEuiMenuHeaderElement: {
        prototype: HTMLEuiMenuHeaderElement;
        new (): HTMLEuiMenuHeaderElement;
    };
    interface HTMLEuiMenuItemElement extends Components.EuiMenuItem, HTMLStencilElement {
    }
    var HTMLEuiMenuItemElement: {
        prototype: HTMLEuiMenuItemElement;
        new (): HTMLEuiMenuItemElement;
    };
    interface HTMLEuiMenuPanelElement extends Components.EuiMenuPanel, HTMLStencilElement {
    }
    var HTMLEuiMenuPanelElement: {
        prototype: HTMLEuiMenuPanelElement;
        new (): HTMLEuiMenuPanelElement;
    };
    interface HTMLEuiMenuSectionElement extends Components.EuiMenuSection, HTMLStencilElement {
    }
    var HTMLEuiMenuSectionElement: {
        prototype: HTMLEuiMenuSectionElement;
        new (): HTMLEuiMenuSectionElement;
    };
    interface HTMLEuiPaginationElement extends Components.EuiPagination, HTMLStencilElement {
    }
    var HTMLEuiPaginationElement: {
        prototype: HTMLEuiPaginationElement;
        new (): HTMLEuiPaginationElement;
    };
    interface HTMLEuiRadioElement extends Components.EuiRadio, HTMLStencilElement {
    }
    var HTMLEuiRadioElement: {
        prototype: HTMLEuiRadioElement;
        new (): HTMLEuiRadioElement;
    };
    interface HTMLEuiRadioGroupElement extends Components.EuiRadioGroup, HTMLStencilElement {
    }
    var HTMLEuiRadioGroupElement: {
        prototype: HTMLEuiRadioGroupElement;
        new (): HTMLEuiRadioGroupElement;
    };
    interface HTMLEuiRowElement extends Components.EuiRow, HTMLStencilElement {
    }
    var HTMLEuiRowElement: {
        prototype: HTMLEuiRowElement;
        new (): HTMLEuiRowElement;
    };
    interface HTMLEuiSectionElement extends Components.EuiSection, HTMLStencilElement {
    }
    var HTMLEuiSectionElement: {
        prototype: HTMLEuiSectionElement;
        new (): HTMLEuiSectionElement;
    };
    interface HTMLEuiSelectElement extends Components.EuiSelect, HTMLStencilElement {
    }
    var HTMLEuiSelectElement: {
        prototype: HTMLEuiSelectElement;
        new (): HTMLEuiSelectElement;
    };
    interface HTMLEuiSelectDropdownElement extends Components.EuiSelectDropdown, HTMLStencilElement {
    }
    var HTMLEuiSelectDropdownElement: {
        prototype: HTMLEuiSelectDropdownElement;
        new (): HTMLEuiSelectDropdownElement;
    };
    interface HTMLEuiSelectDropdownContentElement extends Components.EuiSelectDropdownContent, HTMLStencilElement {
    }
    var HTMLEuiSelectDropdownContentElement: {
        prototype: HTMLEuiSelectDropdownContentElement;
        new (): HTMLEuiSelectDropdownContentElement;
    };
    interface HTMLEuiSelectDropdownOptionElement extends Components.EuiSelectDropdownOption, HTMLStencilElement {
    }
    var HTMLEuiSelectDropdownOptionElement: {
        prototype: HTMLEuiSelectDropdownOptionElement;
        new (): HTMLEuiSelectDropdownOptionElement;
    };
    interface HTMLEuiSelectOptionElement extends Components.EuiSelectOption, HTMLStencilElement {
    }
    var HTMLEuiSelectOptionElement: {
        prototype: HTMLEuiSelectOptionElement;
        new (): HTMLEuiSelectOptionElement;
    };
    interface HTMLEuiSvgElement extends Components.EuiSvg, HTMLStencilElement {
    }
    var HTMLEuiSvgElement: {
        prototype: HTMLEuiSvgElement;
        new (): HTMLEuiSvgElement;
    };
    interface HTMLEuiSwitchElement extends Components.EuiSwitch, HTMLStencilElement {
    }
    var HTMLEuiSwitchElement: {
        prototype: HTMLEuiSwitchElement;
        new (): HTMLEuiSwitchElement;
    };
    interface HTMLEuiTextareaElement extends Components.EuiTextarea, HTMLStencilElement {
    }
    var HTMLEuiTextareaElement: {
        prototype: HTMLEuiTextareaElement;
        new (): HTMLEuiTextareaElement;
    };
    interface HTMLElementTagNameMap {
        "eui-app-bar": HTMLEuiAppBarElement;
        "eui-button": HTMLEuiButtonElement;
        "eui-button-group": HTMLEuiButtonGroupElement;
        "eui-button-menu": HTMLEuiButtonMenuElement;
        "eui-card": HTMLEuiCardElement;
        "eui-checkbox": HTMLEuiCheckboxElement;
        "eui-chip": HTMLEuiChipElement;
        "eui-col": HTMLEuiColElement;
        "eui-drawer": HTMLEuiDrawerElement;
        "eui-dropdown": HTMLEuiDropdownElement;
        "eui-dropdown-wrapper": HTMLEuiDropdownWrapperElement;
        "eui-field": HTMLEuiFieldElement;
        "eui-icon": HTMLEuiIconElement;
        "eui-input": HTMLEuiInputElement;
        "eui-item-counter": HTMLEuiItemCounterElement;
        "eui-loading-spinner": HTMLEuiLoadingSpinnerElement;
        "eui-menu-controller": HTMLEuiMenuControllerElement;
        "eui-menu-divider": HTMLEuiMenuDividerElement;
        "eui-menu-header": HTMLEuiMenuHeaderElement;
        "eui-menu-item": HTMLEuiMenuItemElement;
        "eui-menu-panel": HTMLEuiMenuPanelElement;
        "eui-menu-section": HTMLEuiMenuSectionElement;
        "eui-pagination": HTMLEuiPaginationElement;
        "eui-radio": HTMLEuiRadioElement;
        "eui-radio-group": HTMLEuiRadioGroupElement;
        "eui-row": HTMLEuiRowElement;
        "eui-section": HTMLEuiSectionElement;
        "eui-select": HTMLEuiSelectElement;
        "eui-select-dropdown": HTMLEuiSelectDropdownElement;
        "eui-select-dropdown-content": HTMLEuiSelectDropdownContentElement;
        "eui-select-dropdown-option": HTMLEuiSelectDropdownOptionElement;
        "eui-select-option": HTMLEuiSelectOptionElement;
        "eui-svg": HTMLEuiSvgElement;
        "eui-switch": HTMLEuiSwitchElement;
        "eui-textarea": HTMLEuiTextareaElement;
    }
}
declare namespace LocalJSX {
    interface EuiAppBar {
        /**
          * styles of the app-bar
         */
        "styles"?: {
    position?: 'fixed' | 'absolute' | 'relative';
    height?: number;
    background?: string;
    endDistances?: number;
    boxShadows?: {
      top?: string;
      bottom?: string;
    };
  };
        /**
          * location of the app-bar
          * @type {('top' | 'bottom')}
         */
        "type"?: 'top' | 'bottom';
    }
    interface EuiButton {
        /**
          * active state for the button
         */
        "active"?: boolean;
        /**
          * if set button will render as an icon button disregarding leadingIcon trailingIcon and text
          * @type Icons
         */
        "buttonIcon"?: Icons;
        /**
          * disables the button
         */
        "disabled"?: boolean;
        /**
          * sets the leading icon for the component
         */
        "leadingIcon"?: Icons;
        /**
          * sets the size of the button
          * @type ComponentSize
         */
        "size"?: ComponentSize;
        /**
          * sets a text label for the button
         */
        "text"?: string;
        /**
          * sets the trailing icon for the component
         */
        "trailingIcon"?: Icons;
        /**
          * sets the styling of the button
          * @type  'raised' | 'outlined' | 'text' | 'brand'
         */
        "type"?: 'primary' | 'outlined' | 'text' | 'brand';
    }
    interface EuiButtonGroup {
    }
    interface EuiButtonMenu {
        /**
          * sets the alignment of the dropdown
          * @type {('left' | 'right')}
         */
        "dropdownAlignment"?: 'left' | 'right';
        /**
          * sets the parent element for the eui-button-menu's dropdown
          * @type {HTMLElement}
         */
        "dropdownParent"?: HTMLElement;
        /**
          * sets the width of the dropdown
          * @type {(string | number)}
         */
        "dropdownWidth"?: number | string;
        /**
          * sets and reflects the state of the dropdown inside the button menu
          * @type {boolean}
         */
        "isDropdownOpen"?: boolean;
        /**
          * sets the size of the eui-button-menu
          * @type {string}
         */
        "size"?: ComponentSize;
        /**
          * sets the label of the eui-button-menu
          * @type {string}
         */
        "text"?: string;
        /**
          * sets the styling of the eui-button-menu
          * @type {string}
         */
        "type"?: 'primary' | 'brand' | 'outlined' | 'text';
    }
    interface EuiCard {
    }
    interface EuiCheckbox {
        /**
          * sets and reflects the state of the checkbox partial counts as unchecked
         */
        "checked"?: boolean;
        /**
          * disables the checkbox and the pointer events
          * @type {string}
         */
        "disabled"?: boolean;
        /**
          * sets error design
         */
        "error"?: boolean;
        /**
          * sets the label for the checkbox
         */
        "label"?: string;
        /**
          * sets the name attribute of the inner input
         */
        "name"?: string;
        /**
          * Custom change event only fires if the change happened inside
         */
        "onChanged"?: (event: CustomEvent<boolean>) => void;
        /**
          * sets the visual for the partial checkbox only unchecked inputs will shown as partial
         */
        "partial"?: boolean;
        /**
          * sets the size of the checkbox
         */
        "size"?: ComponentSize;
    }
    interface EuiChip {
        /**
          * sets the label of the chip
         */
        "label"?: string;
        /**
          * if true the will have rounded edges
         */
        "rounded"?: boolean;
        /**
          * sets the size of the component
          * @type {ComponentSize}
         */
        "size"?: ComponentSize;
    }
    interface EuiCol {
        /**
          * sets all parameters of the component for below lg breakpoint when an object is passed or sets the span of the component when number is passed
          * @type  (number | ColDescriptor)
         */
        "lg"?: number | ColDescriptor;
        /**
          * sets left of the col proportionately to the spans of the parent for below lg breakpoint
          * @type number
         */
        "lgOffset"?: number;
        /**
          * sets the ordering of the columns for below lg breakpoint
          * @type number
         */
        "lgOrder"?: number;
        /**
          * sets the width of the col according to the parent row's `spans` for below lg breakpoint
          * @type number
         */
        "lgSpan"?: number;
        /**
          * sets all parameters of the component for below md breakpoint when an object is passed or sets the span of the component when number is passed
          * @type  (number | ColDescriptor)
         */
        "md"?: number | ColDescriptor;
        /**
          * sets left of the col proportionately to the spans of the parent for below md breakpoint
          * @type number
         */
        "mdOffset"?: number;
        /**
          * sets the ordering of the columns for below md breakpoint
          * @type number
         */
        "mdOrder"?: number;
        /**
          * sets the width of the col according to the parent row's `spans` for below md breakpoint
          * @type number
         */
        "mdSpan"?: number;
        /**
          * sets left of the col proportionately to the spans of the parent
          * @type number
         */
        "offset"?: number;
        /**
          * sets the ordering of the columns
          * @type number
         */
        "order"?: number;
        /**
          * sets all parameters of the component for below sm breakpoint when an object is passed or sets the span of the component when number is passed
          * @type  (number | ColDescriptor)
         */
        "sm"?: number | ColDescriptor;
        /**
          * sets left of the col proportionately to the spans of the parent for below sm breakpoint
          * @type number
         */
        "smOffset"?: number;
        /**
          * sets the ordering of the columns for below sm breakpoint
          * @type number
         */
        "smOrder"?: number;
        /**
          * sets the width of the col according to the parent row's `spans` for below sm breakpoint
          * @type number
         */
        "smSpan"?: number;
        /**
          * sets the width of the col according to the parent row's `spans`
          * @type number
         */
        "span"?: number;
        /**
          * sets all parameters of the component for below xl breakpoint when an object is passed or sets the span of the component when number is passed
          * @type  (number | ColDescriptor)
         */
        "xl"?: number | ColDescriptor;
        /**
          * sets left of the col proportionately to the spans of the parent for below xl breakpoint
          * @type number
         */
        "xlOffset"?: number;
        /**
          * sets the ordering of the columns for below xl breakpoint
          * @type number
         */
        "xlOrder"?: number;
        /**
          * sets the width of the col according to the parent row's `spans` for below xl breakpoint
          * @type number
         */
        "xlSpan"?: number;
        /**
          * sets all parameters of the component for below xs breakpoint when an object is passed or sets the span of the component when number is passed
          * @type  (number | ColDescriptor)
         */
        "xs"?: number | ColDescriptor;
        /**
          * sets left of the col proportionately to the spans of the parent for below xs breakpoint
          * @type number
         */
        "xsOffset"?: number;
        /**
          * sets the ordering of the columns for below xs breakpoint
          * @type number
         */
        "xsOrder"?: number;
        /**
          * sets the width of the col according to the parent row's `spans` for below xs breakpoint
          * @type number
         */
        "xsSpan"?: number;
        /**
          * sets all parameters of the component for below xxl breakpoint when an object is passed or sets the span of the component when number is passed
          * @type  (number | ColDescriptor)
         */
        "xxl"?: number | ColDescriptor;
        /**
          * sets left of the col proportionately to the spans of the parent for below xxl breakpoint
          * @type number
         */
        "xxlOffset"?: number;
        /**
          * sets the ordering of the columns for below xxl breakpoint
          * @type number
         */
        "xxlOrder"?: number;
        /**
          * sets the width of the col according to the parent row's `spans` for below xxl breakpoint
          * @type number
         */
        "xxlSpan"?: number;
        /**
          * sets all parameters of the component for xxl breakpoint and over when an object is passed or sets the span of the component when number is passed
          * @type  (number | ColDescriptor)
         */
        "xxxl"?: number | ColDescriptor;
        /**
          * sets left of the col proportionately to the spans of the parent for xxl breakpoint and over
          * @type number
         */
        "xxxlOffset"?: number;
        /**
          * sets the ordering of the columns for xxl breakpoint and over
          * @type number
         */
        "xxxlOrder"?: number;
        /**
          * sets the width of the col according to the parent row's `spans` for xxl breakpoint and over
          * @type number
         */
        "xxxlSpan"?: number;
    }
    interface EuiDrawer {
        /**
          * sets and reflects the state of the left drawer
          * @type {boolean}
         */
        "leftDrawerIsOpen"?: boolean;
        /**
          * sets the name of the drawer, it will be used in the events
          * @type {string}
         */
        "name"?: string;
        /**
          * sets and reflects the state of the right drawer
          * @type {boolean}
         */
        "rightDrawerIsOpen"?: boolean;
        /**
          * sets the size of the component
          * @type {ComponentSize}
         */
        "size"?: ComponentSize;
        /**
          * sets the type of the drawer
          * @type {string}
         */
        "type"?: 'push' | 'squish' | 'overlay';
    }
    interface EuiDropdown {
        /**
          * sets and reflects the state of the dropdown
          * @type {boolean}
         */
        "isOpen"?: boolean;
        /**
          * Emits an event when the state of the dropdown changed
         */
        "onOpenStateChange"?: (event: CustomEvent<boolean>) => void;
        /**
          * sets and reflects the identifier of the opener
          * @type {null}
         */
        "openerId"?: string;
        /**
          * sets the position of the dropdown
          * @type {{}}
         */
        "position"?: { top?: number; right?: number; bottom?: number; left?: number };
        /**
          * sets the size of the component can be 'small', 'medium' or 'large' defaults to 'small'
         */
        "size"?: ComponentSize;
        /**
          * sets and reflects the width of the dropdown
          * @type {boolean}
         */
        "width"?: string;
    }
    interface EuiDropdownWrapper {
        /**
          * sets the alignment of the dropdown based on this element
          * @type {('left' | 'right')}
         */
        "dropdownAlignment"?: 'left' | 'right';
        /**
          * sets the parent element for the dropdown
          * @type {HTMLElement}
         */
        "dropdownParent"?: HTMLElement;
        /**
          * sets the width of the dropdown
          * @type {(string | number)}
         */
        "dropdownWidth"?: number | string;
        /**
          * sets and reflects the state of it's dropdown element
          * @type {boolean}
         */
        "isDropdownOpen"?: boolean;
        /**
          * Triggers an event when the parent of  the dropdown is clicked
         */
        "onClicked"?: (event: CustomEvent<any>) => void;
        /**
          * Triggers an event after the dropdown state changed
         */
        "onDropdownStateChanged"?: (event: CustomEvent<boolean>) => void;
    }
    interface EuiField {
        /**
          * passes on disabled state to the component
         */
        "disabled"?: boolean;
        /**
          * error message that is to be displayed
         */
        "error"?: string;
        /**
          * message to be displayed in case of error
         */
        "errorDisplayType"?: 'always' | 'onError';
        /**
          * label that is to be displayed infront of over the component
          * @type string
         */
        "label"?: string;
        /**
          * sets the label style of the component
          * @type {'strong' | 'default'}
         */
        "labelStyle"?: 'strong' | 'default';
        /**
          * sets size on child component
         */
        "size"?: ComponentSize;
    }
    interface EuiIcon {
        /**
          * the name of the icon in case it used with the built in ones
         */
        "icon"?: Icons;
        /**
          * sets the size of the component
          * @type {ComponentSize}
         */
        "size"?: ComponentSize;
        /**
          * sets the source of the image to one of your assets
         */
        "src"?: string;
        /**
          * type of the icon it can be svg or img, it takes a guess if not provided
         */
        "type"?: 'img' | 'svg';
    }
    interface EuiInput {
        /**
          * If the value of the type attribute is `"file"`, then this attribute will indicate the types of files that the server accepts, otherwise it will be ignored. The value must be a comma-separated list of unique content type specifiers.
         */
        "accept"?: string;
        /**
          * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.
          * @type {('off' | 'none' | 'on' | 'sentences' | 'words' | 'characters')}
         */
        "autocapitalize"?: string;
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autocomplete"?: 'on' | 'off';
        /**
          * Whether auto correction should be enabled when the user is entering/editing the text value.
         */
        "autocorrect"?: 'on' | 'off';
        /**
          * This Boolean attribute lets you specify that a form control should have input focus when the page loads.
         */
        "autofocus"?: boolean;
        /**
          * If set true clears error state on the input when focused
         */
        "clearErrorOnFocus"?: boolean;
        /**
          * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
         */
        "clearInput"?: boolean;
        /**
          * If `true`, the value will be cleared after focus upon edit. Defaults to `true` when `type` is `"password"`, `false` for all other types.
         */
        "clearOnEdit"?: boolean;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled"?: boolean;
        /**
          * if set true it enables error state for the input
         */
        "error"?: boolean;
        /**
          * A hint to the browser for which keyboard to display. Possible values: `"none"`, `"text"`, `"tel"`, `"url"`, `"email"`, `"numeric"`, `"decimal"`, and `"search"`.
         */
        "inputmode"?: InputModes;
        /**
          * True if input is part of an eui-field
         */
        "isField"?: boolean;
        /**
          * The maximum value, which must not be less than its minimum (min attribute) value.
         */
        "max"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the maximum number of characters that the user can enter.
         */
        "maxlength"?: number;
        /**
          * The minimum value, which must not be greater than its maximum (max attribute) value.
         */
        "min"?: string;
        /**
          * If the value of the type attribute is `text`, `email`, `search`, `password`, `tel`, or `url`, this attribute specifies the minimum number of characters that the user can enter.
         */
        "minlength"?: number;
        /**
          * If `true`, the user can enter more than one value. This attribute applies when the type attribute is set to `"email"` or `"file"`, otherwise it is ignored.
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onEuiBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onEuiChange"?: (event: CustomEvent<EuiInputChangeEventDetails>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onEuiFocus"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onEuiInput"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * A regular expression that the value is checked against. The pattern must match the entire value, not just some subset. Use the title attribute to describe the pattern to help the user. This attribute applies when the value of the type attribute is `"text"`, `"search"`, `"tel"`, `"url"`, `"email"`, or `"password"`, otherwise it is ignored.
         */
        "pattern"?: string;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string | null;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * sets the size of the input can be 'small', 'medium' or 'large' defaults to 'small'
         */
        "size"?: ComponentSize;
        /**
          * If `true`, the element will have its spelling and grammar checked.
         */
        "spellcheck"?: boolean;
        /**
          * Works with the min and max attributes to limit the increments at which a value can be set. Possible values are: `"any"` or a positive floating point number.
         */
        "step"?: string;
        /**
          * The type of control to display. The default type is text.
         */
        "type"?: TextFieldTypes;
        /**
          * The value of the input.
         */
        "value"?: string | null | number;
    }
    interface EuiItemCounter {
        /**
          * Number of active items
          * @type {number}
         */
        "activeItem"?: number;
        /**
          * Number of all item
          * @type {number}
         */
        "allItem"?: number;
        /**
          * sets the size of the component can be 'small', 'medium' or 'large' defaults to 'small'
         */
        "size"?: ComponentSize;
    }
    interface EuiLoadingSpinner {
        /**
          * sets the stroke color of the animation
          * @type {string}
         */
        "color"?: string;
    }
    interface EuiMenuController {
        /**
          * Name of the selected panel
         */
        "selectedPanel"?: string;
    }
    interface EuiMenuDivider {
    }
    interface EuiMenuHeader {
        /**
          * sets the level of indent
         */
        "indent"?: number;
        /**
          * the amount by which each level is indented to the previous level
         */
        "indentAmount"?: number;
        /**
          * sets the size of the component can be 'small', 'medium' or 'large' defaults to 'small'
         */
        "size"?: ComponentSize;
    }
    interface EuiMenuItem {
        /**
          * adds checked design to the component
         */
        "checked"?: boolean;
        /**
          * adds disabled design to the component prevents mouse click events and the opening of the dropdown
         */
        "disabled"?: boolean;
        /**
          * sets the element to which the dropdown should be appended if present
         */
        "dropdownParent"?: HTMLElement;
        /**
          * sets the width of the dropdown if present
         */
        "dropdownWidth"?: number;
        /**
          * sets the level of indent
         */
        "indent"?: number;
        /**
          * the amount by which each level is indented to the previous level
         */
        "indentAmount"?: number;
        /**
          * sets the open state of the dropdown of the component
          * @type {boolean}
         */
        "isDropdownOpen"?: boolean;
        /**
          * label that is to be displayed in the item
         */
        "itemLabel"?: string;
        /**
          * sets the position of selected line
         */
        "linePosition"?: 'left' | 'bottom' | 'top' | 'right';
        /**
          * sets the alignment of the dropdown
         */
        "nestAlignment"?: 'start' | 'center' | 'end';
        /**
          * sets the position of the dropdown
         */
        "nestPosition"?: 'bottom' | 'left' | 'right' | 'top';
        /**
          * emitted when dropdown is closed
         */
        "onCloseDropdown"?: (event: CustomEvent<string>) => void;
        /**
          * emitted when dropdown is opened or closed
         */
        "onDropdownStateChange"?: (event: CustomEvent<boolean>) => void;
        /**
          * adds selected design to the component
         */
        "selected"?: boolean;
        /**
          * sets the size of the component can be 'small', 'medium' or 'large' defaults to 'small'
         */
        "size"?: ComponentSize;
        /**
          * sets the type of component if type is 'default' the component has no dropdown if type is 'click' the component has dropdown and it opens when the component is clicked if type is 'hover' the component has dropdown and it opens when the component is hovered if type is 'icon' the component has dropdown and it opens when the chevron in the component is clicked
          * @type {'default' | 'click' | 'hover' | 'icon'}
         */
        "type"?: 'default' | 'click' | 'hover' | 'icon';
        /**
          * unique id of the menu item
         */
        "uuid"?: string;
    }
    interface EuiMenuPanel {
        /**
          * Makes the panel headerless
          * @type {boolean}
         */
        "headerless"?: boolean;
        /**
          * sets the name of the menu panel
         */
        "panelName": string;
        /**
          * sets the title of the panel
          * @type {string}
         */
        "panelTitle"?: string;
        /**
          * sets the size of the component can be 'small', 'medium' or 'large' defaults to 'small'
         */
        "size"?: ComponentSize;
    }
    interface EuiMenuSection {
        /**
          * makes the menu section collapsible
         */
        "collapsible"?: boolean;
        /**
          * sets the indent for the menu item
         */
        "menuHeaderIndent"?: number;
        /**
          * emits an event after the state of the collapse change
          * @type {EventEmitter<boolean>}
         */
        "onCollapseToggled"?: (event: CustomEvent<boolean>) => void;
        /**
          * sets the title of the section
         */
        "sectionTitle"?: string;
    }
    interface EuiPagination {
        /**
          * sets the current page
          * @type {number}
         */
        "currentPage"?: number;
        /**
          * Emits the page number after a navigation chevron is clicked
         */
        "onSelectedPageChange"?: (event: CustomEvent<number>) => void;
        /**
          * sets the number of pages
          * @type {number}
         */
        "pages"?: number;
        /**
          * sets the size of the component can be 'small', 'medium' or 'large' defaults to 'small'
         */
        "size"?: ComponentSize;
    }
    interface EuiRadio {
        /**
          * sets and reflects the state of the radio element
         */
        "checked"?: boolean;
        /**
          * disable the radio element
         */
        "disabled"?: boolean;
        /**
          * sets the label of the inner radio input
         */
        "label"?: string;
        /**
          * sets the name of the inner radio input
         */
        "name"?: string;
        /**
          * emits the state of the radio element
         */
        "onEuiRadioChange"?: (event: CustomEvent<{
    name: string;
    value: number | string | string[];
  }>) => void;
        /**
          * sets the size of the component can be 'small', 'medium' or 'large' defaults to 'small'
         */
        "size"?: ComponentSize;
        /**
          * sets the value of the inner radio input
         */
        "value"?: number | string | string[];
    }
    interface EuiRadioGroup {
        /**
          * sets the name of the inner radios
         */
        "name"?: string;
        /**
          * emits an event when a radio button with the same name changed in it
         */
        "onEuiRadioGroupChange"?: (event: CustomEvent<{
    name: string;
    value: number | string | string[];
  }>) => void;
        /**
          * sets and reflects the selected value of the inner radios
         */
        "value"?: number | string | string[];
        /**
          * sets values and label and availability of the radios
          * @type {RadioGroupValue[]}
         */
        "values"?: RadioGroupValue[];
    }
    interface EuiRow {
        /**
          * sets the breakpoint for window widths
         */
        "breakpoints"?: Breakpoints;
        /**
          * amount of space between cols horizontally
         */
        "gutter"?: number | Gutter;
        /**
          * sets the max amount of spans that are to be displayed in the component
          * @type number
         */
        "spans"?: number;
        /**
          * amount of space between cols vertically
         */
        "verticalGutter"?: number | Gutter;
    }
    interface EuiSection {
        /**
          * if the collapsible is set to true stores the state of the collapse
         */
        "collapsed"?: boolean;
        /**
          * if set to true a click on the header collapses the body
         */
        "collapsible"?: boolean;
        /**
          * changes the background color of the header
         */
        "headerStyle"?: 'light' | 'dark';
        /**
          * sets the label of the section required
         */
        "label": string;
        /**
          * changes the size related styles of the component
         */
        "size"?: ComponentSize;
    }
    interface EuiSelect {
        /**
          * The text to display on the cancel button.
         */
        "cancelText"?: string;
        /**
          * If set true clears error state on the input when focused
         */
        "clearErrorOnFocus"?: boolean;
        /**
          * A property name or function used to compare object values
         */
        "compareWith"?: string | SelectCompareFn | null;
        /**
          * If `true`, the user cannot interact with the select.
         */
        "disabled"?: boolean;
        /**
          * sets the parent of the dropdown
          * @type {HTMLElement}
         */
        "dropdownParent"?: HTMLElement;
        /**
          * position of the select dropdown component if set 'absolute' dropdown appears next to dropdown
         */
        "dropdownPosition"?: 'absolute' | 'fixed';
        /**
          * if set true it enables error state for the select
         */
        "error"?: boolean;
        /**
          * focus state of the component
         */
        "hasFocus"?: boolean;
        /**
          * True if input is part of an eui-field
         */
        "isField"?: boolean;
        /**
          * If `true`, the select can accept multiple values.
         */
        "multiple"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * The text to display on the ok button.
         */
        "okText"?: string;
        /**
          * Emitted when the select loses focus.
         */
        "onEuiBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the selection is cancelled.
         */
        "onEuiCancel"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onEuiChange"?: (event: CustomEvent<SelectChangeEventDetail>) => void;
        /**
          * Emitted when the select has focus.
         */
        "onEuiFocus"?: (event: CustomEvent<void>) => void;
        /**
          * If `true`, the user cannot interact with the select.
         */
        "options"?: SelectOptionInterface[];
        /**
          * The text to display when the select is empty.
         */
        "placeholder"?: string | null;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * The text to display instead of the selected option's value.
         */
        "selectedText"?: string | null;
        /**
          * Sets the size styles of the select component
         */
        "size"?: ComponentSize;
        /**
          * the value of the select.
         */
        "value"?: EuiOptionInterface | EuiOptionInterface[];
        /**
          * If `true`, the user cannot interact with the select.
         */
        "valueDisplayPosition"?: 'under' | 'inside';
    }
    interface EuiSelectDropdown {
        /**
          * An array of actions for the select dropdown.
         */
        "actions"?: ComboboxAction[];
        /**
          * If `true`, the select dropdown will animate.
         */
        "animated"?: boolean;
        /**
          * sets the displayed content wrapper for the options
         */
        "contentElement"?: string;
        /**
          * custom parameters for custom content components
         */
        "customContentParams"?: {[key: string]: unknown};
        /**
          * custom parameters for custom option components
         */
        "customOptionParams"?: {[key: string]: unknown};
        /**
          * sets whether the filter is enabled
         */
        "inputEnabled"?: boolean;
        /**
          * loading state for the select dropdown.
         */
        "isLoading"?: boolean;
        /**
          * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
         */
        "keyboardClose"?: boolean;
        /**
          * contains the texts that can be overwritten
         */
        "localization"?: SelectDropdownLocalization;
        /**
          * min width of the component
         */
        "minWidth"?: number;
        /**
          * Emitted after the dropdown is dismissed.
         */
        "onEuiSelectDropdownDidDismiss"?: (event: CustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted after the dropdown is presented.
         */
        "onEuiSelectDropdownDidPresent"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted before the dropdown is dismissed.
         */
        "onEuiSelectDropdownWillDismiss"?: (event: CustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted before the dropdown is presented.
         */
        "onEuiSelectDropdownWillPresent"?: (event: CustomEvent<void>) => void;
        /**
          * sets the displayed option element
         */
        "optionElement"?: string;
        /**
          * An array of options for the select dropdown.
         */
        "options"?: EuiOptionInterface[];
        "overlayIndex": number;
        /**
          * parent component
         */
        "parent"?: HTMLElement;
        /**
          * position of the dropdown
         */
        "position"?: 'absolute' | 'fixed';
        /**
          * icon that is rendered in option
         */
        "selectedIcon"?: string;
        /**
          * sets whether selected icon is displayed in option
         */
        "selectedIconEnabled"?: boolean;
        /**
          * position of the selected icon in option
         */
        "selectedIconPosition"?: 'start' | 'end';
        /**
          * event sent by select filed on open
         */
        "size"?: ComponentSize;
        /**
          * value of the parent component
         */
        "value"?: EuiOptionInterface[] | EuiOptionInterface;
    }
    interface EuiSelectDropdownContent {
        /**
          * input to display loading state in the dropdown content
         */
        "isLoading"?: boolean;
        /**
          * emits when an option is clicked
         */
        "onButtonClick"?: (event: CustomEvent<any>) => void;
        /**
          * emits when the dropdown should dismiss
         */
        "onDismiss"?: (event: CustomEvent<any>) => void;
        /**
          * component rendered for each option
          * @type string
         */
        "optionElement"?: string;
        /**
          * data that is to be displayed
         */
        "options"?: EuiOptionInterface[];
        /**
          * option's parameters
         */
        "params"?: {
    selectedIconPosition?: 'start' | 'end';
    selectedIconEnabled?: boolean;
    selectedIcon?: Icons;
    [key: string]: unknown
  };
        /**
          * size of the component
         */
        "size"?: ComponentSize;
    }
    interface EuiSelectDropdownOption {
        /**
          * option that is to be rendered
         */
        "option": EuiOptionInterface;
        /**
          * parameter of the component selected: sets selected design on the component selectedIconPosition: position of the selected icon selectedIconEnabled: sets whether selected icon is displayed selectedIcon: icon that is rendered isHighlighted: adds bg overlay to the component
         */
        "params"?: {
    selected?: boolean;
    selectedIconPosition?: 'start' | 'end';
    selectedIconEnabled?: boolean;
    selectedIcon?: Icons;
    isHighlighted?: boolean;
  };
        /**
          * size of the component
         */
        "size"?: ComponentSize;
    }
    interface EuiSelectOption {
        /**
          * If `true`, the user cannot interact with the select option.
         */
        "disabled"?: boolean;
        /**
          * in case of grouped options this will be the group of the option
         */
        "group"?: string;
        /**
          * If `true`, the element is selected.
         */
        "selected"?: boolean;
        /**
          * The text value of the option.
         */
        "value"?: string;
    }
    interface EuiSvg {
        /**
          * content
         */
        "content"?: string;
        /**
          * src of the svg that is to be fetched
         */
        "src"?: string;
    }
    interface EuiSwitch {
        /**
          * value of the component
          * @type boolean
          * @default false
         */
        "checked"?: boolean;
        /**
          * sets disabled state for the component
          * @type boolean
          * @default false
         */
        "disabled"?: boolean;
        /**
          * enables icon display in the switch component
          * @type boolean
          * @default false
         */
        "displayIcons"?: boolean;
        /**
          * helper text that is displayed under the component if unset it is not rendered
          * @type string | {checked: string, unchecked: string}
         */
        "helper"?: string | {checked: string, unchecked: string};
        /**
          * icons that are displayed in the component
          * @type { unchecked : Icons, checked: Icons }
          * @default { unchecked: 'x', checked: 'check' }
         */
        "icons"?: {
    unchecked: Icons,
    checked: Icons
  };
        /**
          * label to be displayed next to the component if unset label is not displayed
          * @type string
         */
        "label"?: string;
        /**
          * position of the label
          * @type {'left' | 'right'}
         */
        "labelPosition"?: 'left' | 'right';
        /**
          * emitted when the component is blured detail is empty
         */
        "onEuiBlur"?: (event: CustomEvent<any>) => void;
        /**
          * change event of the component detail is the checked state
         */
        "onEuiChange"?: (event: CustomEvent<any>) => void;
        /**
          * emitted when the component is focused detail is empty
         */
        "onEuiFocus"?: (event: CustomEvent<any>) => void;
        /**
          * size of the component
          * @type ComponentSize
         */
        "size"?: ComponentSize;
    }
    interface EuiTextarea {
        /**
          * If set true clears error state on the input when focused
         */
        "clearErrorOnFocus"?: boolean;
        /**
          * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
         */
        "clearInput"?: boolean;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled"?: boolean;
        /**
          * if set true it enables error state for the input
         */
        "error"?: boolean;
        /**
          * True if input is part of an eui-field
         */
        "isField"?: boolean;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onEuiBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onEuiChange"?: (event: CustomEvent<EuiTextareaChangeEventDetails>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onEuiFocus"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onEuiInput"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * Emitted when the input has been created.
         */
        "onEuiInputDidLoad"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the input has been removed.
         */
        "onEuiInputDidUnload"?: (event: CustomEvent<void>) => void;
        /**
          * Instructional text that shows before the input has a value.
         */
        "placeholder"?: string | null;
        /**
          * If `true`, the user cannot modify the value.
         */
        "readonly"?: boolean;
        /**
          * If `true`, the user must fill in a value before submitting a form.
         */
        "required"?: boolean;
        /**
          * sets the size of the input can be 'small', 'medium' or 'large' defaults to 'small'
         */
        "size"?: ComponentSize;
        /**
          * The value of the input.
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "eui-app-bar": EuiAppBar;
        "eui-button": EuiButton;
        "eui-button-group": EuiButtonGroup;
        "eui-button-menu": EuiButtonMenu;
        "eui-card": EuiCard;
        "eui-checkbox": EuiCheckbox;
        "eui-chip": EuiChip;
        "eui-col": EuiCol;
        "eui-drawer": EuiDrawer;
        "eui-dropdown": EuiDropdown;
        "eui-dropdown-wrapper": EuiDropdownWrapper;
        "eui-field": EuiField;
        "eui-icon": EuiIcon;
        "eui-input": EuiInput;
        "eui-item-counter": EuiItemCounter;
        "eui-loading-spinner": EuiLoadingSpinner;
        "eui-menu-controller": EuiMenuController;
        "eui-menu-divider": EuiMenuDivider;
        "eui-menu-header": EuiMenuHeader;
        "eui-menu-item": EuiMenuItem;
        "eui-menu-panel": EuiMenuPanel;
        "eui-menu-section": EuiMenuSection;
        "eui-pagination": EuiPagination;
        "eui-radio": EuiRadio;
        "eui-radio-group": EuiRadioGroup;
        "eui-row": EuiRow;
        "eui-section": EuiSection;
        "eui-select": EuiSelect;
        "eui-select-dropdown": EuiSelectDropdown;
        "eui-select-dropdown-content": EuiSelectDropdownContent;
        "eui-select-dropdown-option": EuiSelectDropdownOption;
        "eui-select-option": EuiSelectOption;
        "eui-svg": EuiSvg;
        "eui-switch": EuiSwitch;
        "eui-textarea": EuiTextarea;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "eui-app-bar": LocalJSX.EuiAppBar & JSXBase.HTMLAttributes<HTMLEuiAppBarElement>;
            "eui-button": LocalJSX.EuiButton & JSXBase.HTMLAttributes<HTMLEuiButtonElement>;
            "eui-button-group": LocalJSX.EuiButtonGroup & JSXBase.HTMLAttributes<HTMLEuiButtonGroupElement>;
            "eui-button-menu": LocalJSX.EuiButtonMenu & JSXBase.HTMLAttributes<HTMLEuiButtonMenuElement>;
            "eui-card": LocalJSX.EuiCard & JSXBase.HTMLAttributes<HTMLEuiCardElement>;
            "eui-checkbox": LocalJSX.EuiCheckbox & JSXBase.HTMLAttributes<HTMLEuiCheckboxElement>;
            "eui-chip": LocalJSX.EuiChip & JSXBase.HTMLAttributes<HTMLEuiChipElement>;
            "eui-col": LocalJSX.EuiCol & JSXBase.HTMLAttributes<HTMLEuiColElement>;
            "eui-drawer": LocalJSX.EuiDrawer & JSXBase.HTMLAttributes<HTMLEuiDrawerElement>;
            "eui-dropdown": LocalJSX.EuiDropdown & JSXBase.HTMLAttributes<HTMLEuiDropdownElement>;
            "eui-dropdown-wrapper": LocalJSX.EuiDropdownWrapper & JSXBase.HTMLAttributes<HTMLEuiDropdownWrapperElement>;
            "eui-field": LocalJSX.EuiField & JSXBase.HTMLAttributes<HTMLEuiFieldElement>;
            "eui-icon": LocalJSX.EuiIcon & JSXBase.HTMLAttributes<HTMLEuiIconElement>;
            "eui-input": LocalJSX.EuiInput & JSXBase.HTMLAttributes<HTMLEuiInputElement>;
            "eui-item-counter": LocalJSX.EuiItemCounter & JSXBase.HTMLAttributes<HTMLEuiItemCounterElement>;
            "eui-loading-spinner": LocalJSX.EuiLoadingSpinner & JSXBase.HTMLAttributes<HTMLEuiLoadingSpinnerElement>;
            "eui-menu-controller": LocalJSX.EuiMenuController & JSXBase.HTMLAttributes<HTMLEuiMenuControllerElement>;
            "eui-menu-divider": LocalJSX.EuiMenuDivider & JSXBase.HTMLAttributes<HTMLEuiMenuDividerElement>;
            "eui-menu-header": LocalJSX.EuiMenuHeader & JSXBase.HTMLAttributes<HTMLEuiMenuHeaderElement>;
            "eui-menu-item": LocalJSX.EuiMenuItem & JSXBase.HTMLAttributes<HTMLEuiMenuItemElement>;
            "eui-menu-panel": LocalJSX.EuiMenuPanel & JSXBase.HTMLAttributes<HTMLEuiMenuPanelElement>;
            "eui-menu-section": LocalJSX.EuiMenuSection & JSXBase.HTMLAttributes<HTMLEuiMenuSectionElement>;
            "eui-pagination": LocalJSX.EuiPagination & JSXBase.HTMLAttributes<HTMLEuiPaginationElement>;
            "eui-radio": LocalJSX.EuiRadio & JSXBase.HTMLAttributes<HTMLEuiRadioElement>;
            "eui-radio-group": LocalJSX.EuiRadioGroup & JSXBase.HTMLAttributes<HTMLEuiRadioGroupElement>;
            "eui-row": LocalJSX.EuiRow & JSXBase.HTMLAttributes<HTMLEuiRowElement>;
            "eui-section": LocalJSX.EuiSection & JSXBase.HTMLAttributes<HTMLEuiSectionElement>;
            "eui-select": LocalJSX.EuiSelect & JSXBase.HTMLAttributes<HTMLEuiSelectElement>;
            "eui-select-dropdown": LocalJSX.EuiSelectDropdown & JSXBase.HTMLAttributes<HTMLEuiSelectDropdownElement>;
            "eui-select-dropdown-content": LocalJSX.EuiSelectDropdownContent & JSXBase.HTMLAttributes<HTMLEuiSelectDropdownContentElement>;
            "eui-select-dropdown-option": LocalJSX.EuiSelectDropdownOption & JSXBase.HTMLAttributes<HTMLEuiSelectDropdownOptionElement>;
            "eui-select-option": LocalJSX.EuiSelectOption & JSXBase.HTMLAttributes<HTMLEuiSelectOptionElement>;
            "eui-svg": LocalJSX.EuiSvg & JSXBase.HTMLAttributes<HTMLEuiSvgElement>;
            "eui-switch": LocalJSX.EuiSwitch & JSXBase.HTMLAttributes<HTMLEuiSwitchElement>;
            "eui-textarea": LocalJSX.EuiTextarea & JSXBase.HTMLAttributes<HTMLEuiTextareaElement>;
        }
    }
}
